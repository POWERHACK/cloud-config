spring.application.name=employee-service
server.port=9999
spring.config.import=optional:configserver:http://localhost:8888
server.servlet.context-path=/employee-service
#spring.profiles.active=dev
address-service.ribbon.listOfServers=http://localhost:9001, http://localhost:9002

#for rate limitting ->
resilience4j.ratelimiter.instances.getEmployeesRateLimit.limit-for-period=2
resilience4j.ratelimiter.instances.getEmployeesRateLimit.limit-refresh-period=5s
resilience4j.ratelimiter.instances.getEmployeesRateLimit.timeout-duration=0


#for Retry 
resilience4j.retry.instances.getEmployeeAddressRetry.max-attempts=5
resilience4j.retry.instances.getEmployeeAddressRetry.wait-duration=2s
resilience4j.retry.instances.getEmployeeAddressRetry.retry-exceptions=org.springframework.web.client.ResourceAccessException

#circuit bracker & fault tolerance  ->
#For example, if a Microservice A depends upon Microservice B. For some reason, 
#Microservice B is experiencing an error. Instead of repeatedly calling Microservice B, 
#the Microservice A should take a break (not calling) until Microservice B is completely 
#or partially recovered. Using Circuit Breaker we can eliminate the flow of failures to 
#downstream/upstream. We can achieve this functionality easily with the help of annotation 
#@CircuitBreaker without writing a specific code.
resilience4j.circuitbreaker.instances.getAllAddressCB.failure-rate-threshold=80
resilience4j.circuitbreaker.instances.getAllAddressCB.sliding-window-size=10
resilience4j.circuitbreaker.instances.getAllAddressCB.sliding-window-type=COUNT_BASED
resilience4j.circuitbreaker.instances.getAllAddressCB.minimum-number-of-calls=5
resilience4j.circuitbreaker.instances.getAllAddressCB.automatic-transition-from-open-to-half-open-enabled=true
resilience4j.circuitbreaker.instances.getAllAddressCB.permitted-number-of-calls-in-half-open-state=4
resilience4j.circuitbreaker.instances.getAllAddressCB.wait-duration-in-open-state=1s

#1) ‘failure-rate-threshold=80‘ indicates that if 80% of requests are getting failed,
# open the circuit ie. Make the Circuit Breaker state as Open.
#2) ‘sliding-window-size=10‘ indicates that if 80% of requests out of 10 (it means 8) 
#are failing, open the circuit.
#3) ‘sliding-window-type=COUNT_BASED‘ indicates that we are using COUNT_BASED sliding window.
# Another type is TIME_BASED.
#4) ‘minimum-number-of-calls=5‘ indicates that we need at least 5 calls to calculate 
#the failure rate threshold.
#5) ‘automatic-transition-from-open-to-half-open-enabled=true‘ indicates that don’t 
#switch directly from the open state to the closed state, consider the half-open state also.
#6) ‘permitted-number-of-calls-in-half-open-state=4‘ indicates that when on half-open state, 
#consider sending 4 requests. If 80% of them are failing, switch circuit breaker to open state.
#7) ‘wait-duration-in-open-state=1s’ indicates the waiting time interval while switching 
#from the open state to the closed state.


#for time limiter ->
resilience4j.timelimiter.instances.addEmployeeTL.timeout-duration=1ms
resilience4j.timelimiter.instances.addEmployeeTL.cancel-running-future=false